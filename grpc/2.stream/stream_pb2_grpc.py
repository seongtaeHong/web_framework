# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stream_pb2 as stream__pb2


class RouteGuideStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeature = channel.unary_unary(
                '/steam.RouteGuide/GetFeature',
                request_serializer=stream__pb2.Point.SerializeToString,
                response_deserializer=stream__pb2.Feature.FromString,
                )
        self.ListFeatures = channel.unary_stream(
                '/steam.RouteGuide/ListFeatures',
                request_serializer=stream__pb2.Rectangle.SerializeToString,
                response_deserializer=stream__pb2.Feature.FromString,
                )
        self.RecordRoute = channel.stream_unary(
                '/steam.RouteGuide/RecordRoute',
                request_serializer=stream__pb2.Point.SerializeToString,
                response_deserializer=stream__pb2.RouteSummary.FromString,
                )
        self.RouteChat = channel.stream_stream(
                '/steam.RouteGuide/RouteChat',
                request_serializer=stream__pb2.RouteNote.SerializeToString,
                response_deserializer=stream__pb2.RouteNote.FromString,
                )


class RouteGuideServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFeature(self, request, context):
        """unary
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatures(self, request, context):
        """서버 스트림
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordRoute(self, request_iterator, context):
        """클라이언트 스트림
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RouteChat(self, request_iterator, context):
        """양방향 스트림
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RouteGuideServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFeature': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFeature,
                    request_deserializer=stream__pb2.Point.FromString,
                    response_serializer=stream__pb2.Feature.SerializeToString,
            ),
            'ListFeatures': grpc.unary_stream_rpc_method_handler(
                    servicer.ListFeatures,
                    request_deserializer=stream__pb2.Rectangle.FromString,
                    response_serializer=stream__pb2.Feature.SerializeToString,
            ),
            'RecordRoute': grpc.stream_unary_rpc_method_handler(
                    servicer.RecordRoute,
                    request_deserializer=stream__pb2.Point.FromString,
                    response_serializer=stream__pb2.RouteSummary.SerializeToString,
            ),
            'RouteChat': grpc.stream_stream_rpc_method_handler(
                    servicer.RouteChat,
                    request_deserializer=stream__pb2.RouteNote.FromString,
                    response_serializer=stream__pb2.RouteNote.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'steam.RouteGuide', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RouteGuide(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFeature(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/steam.RouteGuide/GetFeature',
            stream__pb2.Point.SerializeToString,
            stream__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/steam.RouteGuide/ListFeatures',
            stream__pb2.Rectangle.SerializeToString,
            stream__pb2.Feature.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordRoute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/steam.RouteGuide/RecordRoute',
            stream__pb2.Point.SerializeToString,
            stream__pb2.RouteSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RouteChat(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/steam.RouteGuide/RouteChat',
            stream__pb2.RouteNote.SerializeToString,
            stream__pb2.RouteNote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
